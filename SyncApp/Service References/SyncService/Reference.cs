//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SyncApp.SyncService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SyncBatchParameters", Namespace="http://schemas.datacontract.org/2004/07/SyncWcfService.Interface")]
    [System.SerializableAttribute()]
    public partial class SyncBatchParameters : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint BatchSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Microsoft.Synchronization.SyncKnowledge DestinationKnowledgeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint BatchSize {
            get {
                return this.BatchSizeField;
            }
            set {
                if ((this.BatchSizeField.Equals(value) != true)) {
                    this.BatchSizeField = value;
                    this.RaisePropertyChanged("BatchSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Microsoft.Synchronization.SyncKnowledge DestinationKnowledge {
            get {
                return this.DestinationKnowledgeField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationKnowledgeField, value) != true)) {
                    this.DestinationKnowledgeField = value;
                    this.RaisePropertyChanged("DestinationKnowledge");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetChangesParameters", Namespace="http://schemas.datacontract.org/2004/07/SyncWcfService.Interface")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.SyncIdFormatGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.SyncKnowledge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.ChangeBatch))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.ForgottenKnowledge))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.SyncProviderPosition))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.ConflictResolutionPolicy))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.SyncSessionStatistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.SyncSchema))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncScopeProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableProgress[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableProgress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncScopeDescription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableDescription[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableDescription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncColumnDescription[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncColumnDescription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncForeignKeyConstraint[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncForeignKeyConstraint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SyncApp.SyncService.SyncBatchParameters))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SyncApp.SyncService.WebSyncFaultException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Data.Rule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Exception))]
    public partial class GetChangesParameters : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Microsoft.Synchronization.ChangeBatch ChangeBatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object DataRetrieverField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Microsoft.Synchronization.ChangeBatch ChangeBatch {
            get {
                return this.ChangeBatchField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangeBatchField, value) != true)) {
                    this.ChangeBatchField = value;
                    this.RaisePropertyChanged("ChangeBatch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object DataRetriever {
            get {
                return this.DataRetrieverField;
            }
            set {
                if ((object.ReferenceEquals(this.DataRetrieverField, value) != true)) {
                    this.DataRetrieverField = value;
                    this.RaisePropertyChanged("DataRetriever");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebSyncFaultException", Namespace="http://schemas.datacontract.org/2004/07/SyncWcfService.Fault")]
    [System.SerializableAttribute()]
    public partial class WebSyncFaultException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Exception InnerExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception InnerException {
            get {
                return this.InnerExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.InnerExceptionField, value) != true)) {
                    this.InnerExceptionField = value;
                    this.RaisePropertyChanged("InnerException");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SyncService.ISqlSyncContract", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISqlSyncContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/Initialize", ReplyAction="http://tempuri.org/IRelationalSyncContract/InitializeResponse")]
        void Initialize(string scopeName, string hostName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/Initialize", ReplyAction="http://tempuri.org/IRelationalSyncContract/InitializeResponse")]
        System.Threading.Tasks.Task InitializeAsync(string scopeName, string hostName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/BeginSession", ReplyAction="http://tempuri.org/IRelationalSyncContract/BeginSessionResponse")]
        void BeginSession(Microsoft.Synchronization.SyncProviderPosition position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/BeginSession", ReplyAction="http://tempuri.org/IRelationalSyncContract/BeginSessionResponse")]
        System.Threading.Tasks.Task BeginSessionAsync(Microsoft.Synchronization.SyncProviderPosition position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/GetKnowledge", ReplyAction="http://tempuri.org/IRelationalSyncContract/GetKnowledgeResponse")]
        SyncApp.SyncService.SyncBatchParameters GetKnowledge();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/GetKnowledge", ReplyAction="http://tempuri.org/IRelationalSyncContract/GetKnowledgeResponse")]
        System.Threading.Tasks.Task<SyncApp.SyncService.SyncBatchParameters> GetKnowledgeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/GetChanges", ReplyAction="http://tempuri.org/IRelationalSyncContract/GetChangesResponse")]
        SyncApp.SyncService.GetChangesParameters GetChanges(uint batchSize, Microsoft.Synchronization.SyncKnowledge destinationKnowledge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/GetChanges", ReplyAction="http://tempuri.org/IRelationalSyncContract/GetChangesResponse")]
        System.Threading.Tasks.Task<SyncApp.SyncService.GetChangesParameters> GetChangesAsync(uint batchSize, Microsoft.Synchronization.SyncKnowledge destinationKnowledge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/ApplyChanges", ReplyAction="http://tempuri.org/IRelationalSyncContract/ApplyChangesResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncIdFormatGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncKnowledge))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.ChangeBatch))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.ForgottenKnowledge))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncProviderPosition))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.ConflictResolutionPolicy))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncSessionStatistics))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.SyncSchema))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncContext))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncScopeProgress))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableProgress[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableProgress))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncScopeDescription))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableDescription[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableDescription))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncColumnDescription[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncColumnDescription))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncForeignKeyConstraint[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncForeignKeyConstraint))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SyncApp.SyncService.SyncBatchParameters))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SyncApp.SyncService.GetChangesParameters))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SyncApp.SyncService.WebSyncFaultException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Data.Rule))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Exception))]
        Microsoft.Synchronization.SyncSessionStatistics ApplyChanges(Microsoft.Synchronization.ConflictResolutionPolicy resolutionPolicy, Microsoft.Synchronization.ChangeBatch sourceChanges, object changeData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/ApplyChanges", ReplyAction="http://tempuri.org/IRelationalSyncContract/ApplyChangesResponse")]
        System.Threading.Tasks.Task<Microsoft.Synchronization.SyncSessionStatistics> ApplyChangesAsync(Microsoft.Synchronization.ConflictResolutionPolicy resolutionPolicy, Microsoft.Synchronization.ChangeBatch sourceChanges, object changeData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/HasUploadedBatchFile", ReplyAction="http://tempuri.org/IRelationalSyncContract/HasUploadedBatchFileResponse")]
        bool HasUploadedBatchFile(string batchFileid, string remotePeerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/HasUploadedBatchFile", ReplyAction="http://tempuri.org/IRelationalSyncContract/HasUploadedBatchFileResponse")]
        System.Threading.Tasks.Task<bool> HasUploadedBatchFileAsync(string batchFileid, string remotePeerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/UploadBatchFile", ReplyAction="http://tempuri.org/IRelationalSyncContract/UploadBatchFileResponse")]
        void UploadBatchFile(string batchFileid, byte[] batchFile, string remotePeerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/UploadBatchFile", ReplyAction="http://tempuri.org/IRelationalSyncContract/UploadBatchFileResponse")]
        System.Threading.Tasks.Task UploadBatchFileAsync(string batchFileid, byte[] batchFile, string remotePeerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/DownloadBatchFile", ReplyAction="http://tempuri.org/IRelationalSyncContract/DownloadBatchFileResponse")]
        byte[] DownloadBatchFile(string batchFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/DownloadBatchFile", ReplyAction="http://tempuri.org/IRelationalSyncContract/DownloadBatchFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadBatchFileAsync(string batchFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/EndSession", ReplyAction="http://tempuri.org/IRelationalSyncContract/EndSessionResponse")]
        void EndSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRelationalSyncContract/EndSession", ReplyAction="http://tempuri.org/IRelationalSyncContract/EndSessionResponse")]
        System.Threading.Tasks.Task EndSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/IRelationalSyncContract/Cleanup", ReplyAction="http://tempuri.org/IRelationalSyncContract/CleanupResponse")]
        void Cleanup();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/IRelationalSyncContract/Cleanup", ReplyAction="http://tempuri.org/IRelationalSyncContract/CleanupResponse")]
        System.Threading.Tasks.Task CleanupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlSyncContract/CreateScopeDescription", ReplyAction="http://tempuri.org/ISqlSyncContract/CreateScopeDescriptionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SyncApp.SyncService.WebSyncFaultException), Action="http://tempuri.org/ISqlSyncContract/CreateScopeDescriptionWebSyncFaultExceptionFa" +
            "ult", Name="WebSyncFaultException", Namespace="http://schemas.datacontract.org/2004/07/SyncWcfService.Fault")]
        void CreateScopeDescription(Microsoft.Synchronization.Data.DbSyncScopeDescription scopeDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlSyncContract/CreateScopeDescription", ReplyAction="http://tempuri.org/ISqlSyncContract/CreateScopeDescriptionResponse")]
        System.Threading.Tasks.Task CreateScopeDescriptionAsync(Microsoft.Synchronization.Data.DbSyncScopeDescription scopeDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlSyncContract/GetScopeDescription", ReplyAction="http://tempuri.org/ISqlSyncContract/GetScopeDescriptionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SyncApp.SyncService.WebSyncFaultException), Action="http://tempuri.org/ISqlSyncContract/GetScopeDescriptionWebSyncFaultExceptionFault" +
            "", Name="WebSyncFaultException", Namespace="http://schemas.datacontract.org/2004/07/SyncWcfService.Fault")]
        Microsoft.Synchronization.Data.DbSyncScopeDescription GetScopeDescription(string scopeName, string serverConnectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlSyncContract/GetScopeDescription", ReplyAction="http://tempuri.org/ISqlSyncContract/GetScopeDescriptionResponse")]
        System.Threading.Tasks.Task<Microsoft.Synchronization.Data.DbSyncScopeDescription> GetScopeDescriptionAsync(string scopeName, string serverConnectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlSyncContract/NeedsScope", ReplyAction="http://tempuri.org/ISqlSyncContract/NeedsScopeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SyncApp.SyncService.WebSyncFaultException), Action="http://tempuri.org/ISqlSyncContract/NeedsScopeWebSyncFaultExceptionFault", Name="WebSyncFaultException", Namespace="http://schemas.datacontract.org/2004/07/SyncWcfService.Fault")]
        bool NeedsScope(string scopeName, string clientConnectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlSyncContract/NeedsScope", ReplyAction="http://tempuri.org/ISqlSyncContract/NeedsScopeResponse")]
        System.Threading.Tasks.Task<bool> NeedsScopeAsync(string scopeName, string clientConnectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlSyncContract/Sync", ReplyAction="http://tempuri.org/ISqlSyncContract/SyncResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SyncApp.SyncService.WebSyncFaultException), Action="http://tempuri.org/ISqlSyncContract/SyncWebSyncFaultExceptionFault", Name="WebSyncFaultException", Namespace="http://schemas.datacontract.org/2004/07/SyncWcfService.Fault")]
        bool Sync(System.Guid clientId, string clientConnectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlSyncContract/Sync", ReplyAction="http://tempuri.org/ISqlSyncContract/SyncResponse")]
        System.Threading.Tasks.Task<bool> SyncAsync(System.Guid clientId, string clientConnectionString);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISqlSyncContractChannel : SyncApp.SyncService.ISqlSyncContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SqlSyncContractClient : System.ServiceModel.ClientBase<SyncApp.SyncService.ISqlSyncContract>, SyncApp.SyncService.ISqlSyncContract {
        
        public SqlSyncContractClient() {
        }
        
        public SqlSyncContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SqlSyncContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SqlSyncContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SqlSyncContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Initialize(string scopeName, string hostName) {
            base.Channel.Initialize(scopeName, hostName);
        }
        
        public System.Threading.Tasks.Task InitializeAsync(string scopeName, string hostName) {
            return base.Channel.InitializeAsync(scopeName, hostName);
        }
        
        public void BeginSession(Microsoft.Synchronization.SyncProviderPosition position) {
            base.Channel.BeginSession(position);
        }
        
        public System.Threading.Tasks.Task BeginSessionAsync(Microsoft.Synchronization.SyncProviderPosition position) {
            return base.Channel.BeginSessionAsync(position);
        }
        
        public SyncApp.SyncService.SyncBatchParameters GetKnowledge() {
            return base.Channel.GetKnowledge();
        }
        
        public System.Threading.Tasks.Task<SyncApp.SyncService.SyncBatchParameters> GetKnowledgeAsync() {
            return base.Channel.GetKnowledgeAsync();
        }
        
        public SyncApp.SyncService.GetChangesParameters GetChanges(uint batchSize, Microsoft.Synchronization.SyncKnowledge destinationKnowledge) {
            return base.Channel.GetChanges(batchSize, destinationKnowledge);
        }
        
        public System.Threading.Tasks.Task<SyncApp.SyncService.GetChangesParameters> GetChangesAsync(uint batchSize, Microsoft.Synchronization.SyncKnowledge destinationKnowledge) {
            return base.Channel.GetChangesAsync(batchSize, destinationKnowledge);
        }
        
        public Microsoft.Synchronization.SyncSessionStatistics ApplyChanges(Microsoft.Synchronization.ConflictResolutionPolicy resolutionPolicy, Microsoft.Synchronization.ChangeBatch sourceChanges, object changeData) {
            return base.Channel.ApplyChanges(resolutionPolicy, sourceChanges, changeData);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Synchronization.SyncSessionStatistics> ApplyChangesAsync(Microsoft.Synchronization.ConflictResolutionPolicy resolutionPolicy, Microsoft.Synchronization.ChangeBatch sourceChanges, object changeData) {
            return base.Channel.ApplyChangesAsync(resolutionPolicy, sourceChanges, changeData);
        }
        
        public bool HasUploadedBatchFile(string batchFileid, string remotePeerId) {
            return base.Channel.HasUploadedBatchFile(batchFileid, remotePeerId);
        }
        
        public System.Threading.Tasks.Task<bool> HasUploadedBatchFileAsync(string batchFileid, string remotePeerId) {
            return base.Channel.HasUploadedBatchFileAsync(batchFileid, remotePeerId);
        }
        
        public void UploadBatchFile(string batchFileid, byte[] batchFile, string remotePeerId) {
            base.Channel.UploadBatchFile(batchFileid, batchFile, remotePeerId);
        }
        
        public System.Threading.Tasks.Task UploadBatchFileAsync(string batchFileid, byte[] batchFile, string remotePeerId) {
            return base.Channel.UploadBatchFileAsync(batchFileid, batchFile, remotePeerId);
        }
        
        public byte[] DownloadBatchFile(string batchFileId) {
            return base.Channel.DownloadBatchFile(batchFileId);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadBatchFileAsync(string batchFileId) {
            return base.Channel.DownloadBatchFileAsync(batchFileId);
        }
        
        public void EndSession() {
            base.Channel.EndSession();
        }
        
        public System.Threading.Tasks.Task EndSessionAsync() {
            return base.Channel.EndSessionAsync();
        }
        
        public void Cleanup() {
            base.Channel.Cleanup();
        }
        
        public System.Threading.Tasks.Task CleanupAsync() {
            return base.Channel.CleanupAsync();
        }
        
        public void CreateScopeDescription(Microsoft.Synchronization.Data.DbSyncScopeDescription scopeDescription) {
            base.Channel.CreateScopeDescription(scopeDescription);
        }
        
        public System.Threading.Tasks.Task CreateScopeDescriptionAsync(Microsoft.Synchronization.Data.DbSyncScopeDescription scopeDescription) {
            return base.Channel.CreateScopeDescriptionAsync(scopeDescription);
        }
        
        public Microsoft.Synchronization.Data.DbSyncScopeDescription GetScopeDescription(string scopeName, string serverConnectionString) {
            return base.Channel.GetScopeDescription(scopeName, serverConnectionString);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Synchronization.Data.DbSyncScopeDescription> GetScopeDescriptionAsync(string scopeName, string serverConnectionString) {
            return base.Channel.GetScopeDescriptionAsync(scopeName, serverConnectionString);
        }
        
        public bool NeedsScope(string scopeName, string clientConnectionString) {
            return base.Channel.NeedsScope(scopeName, clientConnectionString);
        }
        
        public System.Threading.Tasks.Task<bool> NeedsScopeAsync(string scopeName, string clientConnectionString) {
            return base.Channel.NeedsScopeAsync(scopeName, clientConnectionString);
        }
        
        public bool Sync(System.Guid clientId, string clientConnectionString) {
            return base.Channel.Sync(clientId, clientConnectionString);
        }
        
        public System.Threading.Tasks.Task<bool> SyncAsync(System.Guid clientId, string clientConnectionString) {
            return base.Channel.SyncAsync(clientId, clientConnectionString);
        }
    }
}
